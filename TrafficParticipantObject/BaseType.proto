/* ==================================================================
* Copyright (c) 2020,xxxx.
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions
* are met:
*
* 1. Redistributions of source code must retain the above copyright
* notice, this list of conditions and the following disclaimer.
* 2. Redistributions in binary form must reproduce the above copyright
* notice, this list of conditions and the following disclaimer in the
* documentation and/or other materials provided with the
* distribution.
* 3. All advertising materials mentioning features or use of this software
* must display the following acknowledgement:
* This product includes software developed by the xxx Group. and
* its contributors.
* 4. Neither the name of the Group nor the names of its contributors may
* be used to endorse or promote products derived from this software
* without specific prior written permission.
* 5. Licensed under the GNU General Public License v3.0;
* you may not use this file except in compliance with the License.
*
* THIS SOFTWARE IS PROVIDED BY xxx,GROUP AND CONTRIBUTORS
* ===================================================================
* Author: Mobo
* Mail: mobojingjiniao@126.com
*/

syntax = "proto2";

//package TrafficParticipants; //namesapce

enum TP_OBJECT_TYPE{
    TP_OBJECT_TYPE_UNKOWN           = 0;
    TP_OBJECT_TYPE_EGO = 1;
    TP_OBJECT_TYPE_GROUND = 2;
    TP_OBJECT_TYPE_RSP_POINT = 3;
    TP_OBJECT_TYPE_OBSTACLE_STATIC = 4;   // Pillar
    TP_OBJECT_TYPE_OBSTACLE_DYNAMIC = 5;   // Pedestrain, etc.
    TP_OBJECT_TYPE_S_LANE = 6;
    TP_OBJECT_TYPE_LINE_STRAIGHT =7;
    TP_OBJECT_TYPE_LINE_CURVE = 8;
    TP_OBJECT_TYPE_S_PS = 9;
    TP_OBJECT_TYPE_GUAIDANCE = 10;
    TP_OBJECT_TYPE_D_PEDESTRAIN = 11;
    TP_OBJECT_TYPE_D_DOG = 12;
    TP_OBJECT_TYPE_D_POINT = 13;
    TP_OBJECT_TYPE_S_HUD = 14;
    TP_OBJECT_TYPE_D_TRUCK = 15;
    TP_OBJECT_TYPE_D_CAR = 16;
    TP_OBJECT_TYPE_D_BUS = 17;
    
    TP_OBJECT_TYPE_RESERVER = 20;
};

enum TP_SENSOR_TYPE{
    TP_SENSOR_TYPE_UNKNOW = 0;  // unknown 
    TP_SENSOR_TYPE_CAMERA = 1;
    TP_SENSOR_TYPE_USS = 2;
    TP_SENSOR_TYPE_RADAR = 3;
    TP_SENSOR_TYPE_LIDAR = 4;

    TP_SENSOR_TYPE_RESERVE = 5;

};

enum COORD_TYPE {

    COORD_TYPE_UNDEFINE = 0;
    COORD_TYPE_LOCAL_OSG =1;
    COORD_TYPE_GLOBAL_OSG =2;
    COORD_TYPE_GLOBAL_DIN70K =3;
    COORD_TYPE_LOCAL_CAMERA =4;
    COORD_TYPE_LOCAL_IMU =5;

    COORD_TYPE_RESERVE = 10;

};

message Pos{
  required double x = 1;
  required double y = 2;
  required double z = 3;
}

message Point{
  required double x = 1;
  required double y = 2;
  required double z = 3;
  required double radius = 4 [default = 1];//mm
}

message Orient{
  required double x = 1;
  required double y = 2;
  required double z = 3;

}


message Contour{
  optional Point MassCenter = 1;
  required int32 PointCnt  = 2;
  repeated Point Points = 3;
}

message Color{
  required double r =1;
  required double g =2;
  required double b =3;
  required double a =4;
}