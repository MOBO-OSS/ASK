// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ParkingSlotObjectFormat.proto

#include "ParkingSlotObjectFormat.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
class ParkingSlotObjectFormatDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ParkingSlotObjectFormat>
      _instance;
} _ParkingSlotObjectFormat_default_instance_;
namespace protobuf_ParkingSlotObjectFormat_2eproto {
void InitDefaultsParkingSlotObjectFormatImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_BaseType_2eproto::InitDefaultsPoint();
  protobuf_BaseType_2eproto::InitDefaultsColor();
  ::ParkingSlotObjectFormat::_default_name_.DefaultConstruct();
  *::ParkingSlotObjectFormat::_default_name_.get_mutable() = ::std::string("Parking Slot", 12);
  ::google::protobuf::internal::OnShutdownDestroyString(
      ::ParkingSlotObjectFormat::_default_name_.get_mutable());
  {
    void* ptr = &::_ParkingSlotObjectFormat_default_instance_;
    new (ptr) ::ParkingSlotObjectFormat();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ParkingSlotObjectFormat::InitAsDefaultInstance();
}

void InitDefaultsParkingSlotObjectFormat() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsParkingSlotObjectFormatImpl);
}

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ParkingSlotObjectFormat, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ParkingSlotObjectFormat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ParkingSlotObjectFormat, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ParkingSlotObjectFormat, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ParkingSlotObjectFormat, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ParkingSlotObjectFormat, corner_array_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ParkingSlotObjectFormat, color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ParkingSlotObjectFormat, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ParkingSlotObjectFormat, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ParkingSlotObjectFormat, pairid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ParkingSlotObjectFormat, status_),
  7,
  0,
  2,
  ~0u,
  1,
  3,
  4,
  5,
  6,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 14, sizeof(::ParkingSlotObjectFormat)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_ParkingSlotObjectFormat_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "ParkingSlotObjectFormat.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\035ParkingSlotObjectFormat.proto\032\016BaseTyp"
      "e.proto\"\365\001\n\027ParkingSlotObjectFormat\0222\n\004t"
      "ype\030\001 \002(\0162\017.TP_OBJECT_TYPE:\023TP_OBJECT_TY"
      "PE_S_PS\022\032\n\004name\030\003 \002(\t:\014Parking Slot\022\n\n\002i"
      "d\030\004 \002(\005\022\034\n\014corner_array\030\006 \003(\0132\006.Point\022\025\n"
      "\005color\030\007 \002(\0132\006.Color\022\r\n\005width\030\010 \002(\005\022\016\n\006l"
      "ength\030\t \002(\005\022\016\n\006pairID\030\n \001(\005\022\032\n\006status\030\013 "
      "\002(\0162\n.PS_STATUS*S\n\tPS_STATUS\022\027\n\023PS_STATU"
      "S_AVALIABLE\020\000\022\026\n\022PS_STATUS_OCCUPIED\020\001\022\025\n"
      "\021PS_STATUS_RESERVE\020\n"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 380);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ParkingSlotObjectFormat.proto", &protobuf_RegisterTypes);
  ::protobuf_BaseType_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_ParkingSlotObjectFormat_2eproto
const ::google::protobuf::EnumDescriptor* PS_STATUS_descriptor() {
  protobuf_ParkingSlotObjectFormat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ParkingSlotObjectFormat_2eproto::file_level_enum_descriptors[0];
}
bool PS_STATUS_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 10:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void ParkingSlotObjectFormat::InitAsDefaultInstance() {
  ::_ParkingSlotObjectFormat_default_instance_._instance.get_mutable()->color_ = const_cast< ::Color*>(
      ::Color::internal_default_instance());
}
::google::protobuf::internal::ExplicitlyConstructed< ::std::string> ParkingSlotObjectFormat::_default_name_;
void ParkingSlotObjectFormat::clear_corner_array() {
  corner_array_.Clear();
}
void ParkingSlotObjectFormat::clear_color() {
  if (color_ != NULL) color_->Clear();
  clear_has_color();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ParkingSlotObjectFormat::kTypeFieldNumber;
const int ParkingSlotObjectFormat::kNameFieldNumber;
const int ParkingSlotObjectFormat::kIdFieldNumber;
const int ParkingSlotObjectFormat::kCornerArrayFieldNumber;
const int ParkingSlotObjectFormat::kColorFieldNumber;
const int ParkingSlotObjectFormat::kWidthFieldNumber;
const int ParkingSlotObjectFormat::kLengthFieldNumber;
const int ParkingSlotObjectFormat::kPairIDFieldNumber;
const int ParkingSlotObjectFormat::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ParkingSlotObjectFormat::ParkingSlotObjectFormat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ParkingSlotObjectFormat_2eproto::InitDefaultsParkingSlotObjectFormat();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ParkingSlotObjectFormat)
}
ParkingSlotObjectFormat::ParkingSlotObjectFormat(const ParkingSlotObjectFormat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      corner_array_(from.corner_array_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::ParkingSlotObjectFormat::_default_name_.get());
  if (from.has_name()) {
    name_.AssignWithDefault(&::ParkingSlotObjectFormat::_default_name_.get(), from.name_);
  }
  if (from.has_color()) {
    color_ = new ::Color(*from.color_);
  } else {
    color_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:ParkingSlotObjectFormat)
}

void ParkingSlotObjectFormat::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::ParkingSlotObjectFormat::_default_name_.get());
  ::memset(&color_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&color_)) + sizeof(status_));
  type_ = 9;
}

ParkingSlotObjectFormat::~ParkingSlotObjectFormat() {
  // @@protoc_insertion_point(destructor:ParkingSlotObjectFormat)
  SharedDtor();
}

void ParkingSlotObjectFormat::SharedDtor() {
  name_.DestroyNoArena(&::ParkingSlotObjectFormat::_default_name_.get());
  if (this != internal_default_instance()) delete color_;
}

void ParkingSlotObjectFormat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParkingSlotObjectFormat::descriptor() {
  ::protobuf_ParkingSlotObjectFormat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ParkingSlotObjectFormat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ParkingSlotObjectFormat& ParkingSlotObjectFormat::default_instance() {
  ::protobuf_ParkingSlotObjectFormat_2eproto::InitDefaultsParkingSlotObjectFormat();
  return *internal_default_instance();
}

ParkingSlotObjectFormat* ParkingSlotObjectFormat::New(::google::protobuf::Arena* arena) const {
  ParkingSlotObjectFormat* n = new ParkingSlotObjectFormat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ParkingSlotObjectFormat::Clear() {
// @@protoc_insertion_point(message_clear_start:ParkingSlotObjectFormat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  corner_array_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!name_.IsDefault(&::ParkingSlotObjectFormat::_default_name_.get()));
      (*name_.UnsafeRawStringPointer())->assign(*&::ParkingSlotObjectFormat::_default_name_.get());
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(color_ != NULL);
      color_->Clear();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&status_) -
        reinterpret_cast<char*>(&id_)) + sizeof(status_));
    type_ = 9;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ParkingSlotObjectFormat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ParkingSlotObjectFormat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TP_OBJECT_TYPE type = 1 [default = TP_OBJECT_TYPE_S_PS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TP_OBJECT_TYPE_IsValid(value)) {
            set_type(static_cast< ::TP_OBJECT_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string name = 3 [default = "Parking Slot"];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ParkingSlotObjectFormat.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Point corner_array = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_corner_array()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .Color color = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_color()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 width = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 length = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pairID = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_pairid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pairid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .PS_STATUS status = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PS_STATUS_IsValid(value)) {
            set_status(static_cast< ::PS_STATUS >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                11, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ParkingSlotObjectFormat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ParkingSlotObjectFormat)
  return false;
#undef DO_
}

void ParkingSlotObjectFormat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ParkingSlotObjectFormat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TP_OBJECT_TYPE type = 1 [default = TP_OBJECT_TYPE_S_PS];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required string name = 3 [default = "Parking Slot"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ParkingSlotObjectFormat.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // required int32 id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->id(), output);
  }

  // repeated .Point corner_array = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->corner_array_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->corner_array(static_cast<int>(i)), output);
  }

  // required .Color color = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->color_, output);
  }

  // required int32 width = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->width(), output);
  }

  // required int32 length = 9;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->length(), output);
  }

  // optional int32 pairID = 10;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->pairid(), output);
  }

  // required .PS_STATUS status = 11;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ParkingSlotObjectFormat)
}

::google::protobuf::uint8* ParkingSlotObjectFormat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ParkingSlotObjectFormat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TP_OBJECT_TYPE type = 1 [default = TP_OBJECT_TYPE_S_PS];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required string name = 3 [default = "Parking Slot"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ParkingSlotObjectFormat.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // required int32 id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->id(), target);
  }

  // repeated .Point corner_array = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->corner_array_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->corner_array(static_cast<int>(i)), deterministic, target);
  }

  // required .Color color = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *this->color_, deterministic, target);
  }

  // required int32 width = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->width(), target);
  }

  // required int32 length = 9;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->length(), target);
  }

  // optional int32 pairID = 10;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->pairid(), target);
  }

  // required .PS_STATUS status = 11;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ParkingSlotObjectFormat)
  return target;
}

size_t ParkingSlotObjectFormat::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ParkingSlotObjectFormat)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 3 [default = "Parking Slot"];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_color()) {
    // required .Color color = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->color_);
  }

  if (has_id()) {
    // required int32 id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_width()) {
    // required int32 width = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());
  }

  if (has_length()) {
    // required int32 length = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->length());
  }

  if (has_status()) {
    // required .PS_STATUS status = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  if (has_type()) {
    // required .TP_OBJECT_TYPE type = 1 [default = TP_OBJECT_TYPE_S_PS];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  return total_size;
}
size_t ParkingSlotObjectFormat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ParkingSlotObjectFormat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000000df) ^ 0x000000df) == 0) {  // All required fields are present.
    // required string name = 3 [default = "Parking Slot"];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required .Color color = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->color_);

    // required int32 id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 width = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());

    // required int32 length = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->length());

    // required .PS_STATUS status = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());

    // required .TP_OBJECT_TYPE type = 1 [default = TP_OBJECT_TYPE_S_PS];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .Point corner_array = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->corner_array_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->corner_array(static_cast<int>(i)));
    }
  }

  // optional int32 pairID = 10;
  if (has_pairid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pairid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParkingSlotObjectFormat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ParkingSlotObjectFormat)
  GOOGLE_DCHECK_NE(&from, this);
  const ParkingSlotObjectFormat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ParkingSlotObjectFormat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ParkingSlotObjectFormat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ParkingSlotObjectFormat)
    MergeFrom(*source);
  }
}

void ParkingSlotObjectFormat::MergeFrom(const ParkingSlotObjectFormat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ParkingSlotObjectFormat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  corner_array_.MergeFrom(from.corner_array_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::ParkingSlotObjectFormat::_default_name_.get(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_color()->::Color::MergeFrom(from.color());
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000008u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000010u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x00000020u) {
      pairid_ = from.pairid_;
    }
    if (cached_has_bits & 0x00000040u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000080u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ParkingSlotObjectFormat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ParkingSlotObjectFormat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParkingSlotObjectFormat::CopyFrom(const ParkingSlotObjectFormat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ParkingSlotObjectFormat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParkingSlotObjectFormat::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000df) != 0x000000df) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->corner_array())) return false;
  if (has_color()) {
    if (!this->color_->IsInitialized()) return false;
  }
  return true;
}

void ParkingSlotObjectFormat::Swap(ParkingSlotObjectFormat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ParkingSlotObjectFormat::InternalSwap(ParkingSlotObjectFormat* other) {
  using std::swap;
  corner_array_.InternalSwap(&other->corner_array_);
  name_.Swap(&other->name_);
  swap(color_, other->color_);
  swap(id_, other->id_);
  swap(width_, other->width_);
  swap(length_, other->length_);
  swap(pairid_, other->pairid_);
  swap(status_, other->status_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ParkingSlotObjectFormat::GetMetadata() const {
  protobuf_ParkingSlotObjectFormat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ParkingSlotObjectFormat_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
