// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PointObjectFormat.proto

#ifndef PROTOBUF_PointObjectFormat_2eproto__INCLUDED
#define PROTOBUF_PointObjectFormat_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "BaseType.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_PointObjectFormat_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsPointObjectFormatImpl();
void InitDefaultsPointObjectFormat();
inline void InitDefaults() {
  InitDefaultsPointObjectFormat();
}
}  // namespace protobuf_PointObjectFormat_2eproto
class PointObjectFormat;
class PointObjectFormatDefaultTypeInternal;
extern PointObjectFormatDefaultTypeInternal _PointObjectFormat_default_instance_;

// ===================================================================

class PointObjectFormat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PointObjectFormat) */ {
 public:
  PointObjectFormat();
  virtual ~PointObjectFormat();

  PointObjectFormat(const PointObjectFormat& from);

  inline PointObjectFormat& operator=(const PointObjectFormat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PointObjectFormat(PointObjectFormat&& from) noexcept
    : PointObjectFormat() {
    *this = ::std::move(from);
  }

  inline PointObjectFormat& operator=(PointObjectFormat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PointObjectFormat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PointObjectFormat* internal_default_instance() {
    return reinterpret_cast<const PointObjectFormat*>(
               &_PointObjectFormat_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(PointObjectFormat* other);
  friend void swap(PointObjectFormat& a, PointObjectFormat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PointObjectFormat* New() const PROTOBUF_FINAL { return New(NULL); }

  PointObjectFormat* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PointObjectFormat& from);
  void MergeFrom(const PointObjectFormat& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PointObjectFormat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Point pos = 6;
  int pos_size() const;
  void clear_pos();
  static const int kPosFieldNumber = 6;
  const ::Point& pos(int index) const;
  ::Point* mutable_pos(int index);
  ::Point* add_pos();
  ::google::protobuf::RepeatedPtrField< ::Point >*
      mutable_pos();
  const ::google::protobuf::RepeatedPtrField< ::Point >&
      pos() const;

  // repeated .Color color = 7;
  int color_size() const;
  void clear_color();
  static const int kColorFieldNumber = 7;
  const ::Color& color(int index) const;
  ::Color* mutable_color(int index);
  ::Color* add_color();
  ::google::protobuf::RepeatedPtrField< ::Color >*
      mutable_color();
  const ::google::protobuf::RepeatedPtrField< ::Color >&
      color() const;

  // required string name = 3 [default = "Feature Point"];
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required int32 id = 4;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 4;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 size = 8;
  bool has_size() const;
  void clear_size();
  static const int kSizeFieldNumber = 8;
  ::google::protobuf::int32 size() const;
  void set_size(::google::protobuf::int32 value);

  // required .TP_OBJECT_TYPE type = 1 [default = TP_OBJECT_TYPE_D_POINT];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::TP_OBJECT_TYPE type() const;
  void set_type(::TP_OBJECT_TYPE value);

  // @@protoc_insertion_point(class_scope:PointObjectFormat)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_name();
  void clear_has_name();
  void set_has_id();
  void clear_has_id();
  void set_has_size();
  void clear_has_size();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Point > pos_;
  ::google::protobuf::RepeatedPtrField< ::Color > color_;
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _default_name_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 size_;
  int type_;
  friend struct ::protobuf_PointObjectFormat_2eproto::TableStruct;
  friend void ::protobuf_PointObjectFormat_2eproto::InitDefaultsPointObjectFormatImpl();
};
// ===================================================================


// ===================================================================

#if __GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6)
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PointObjectFormat

// required .TP_OBJECT_TYPE type = 1 [default = TP_OBJECT_TYPE_D_POINT];
inline bool PointObjectFormat::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PointObjectFormat::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PointObjectFormat::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PointObjectFormat::clear_type() {
  type_ = 13;
  clear_has_type();
}
inline ::TP_OBJECT_TYPE PointObjectFormat::type() const {
  // @@protoc_insertion_point(field_get:PointObjectFormat.type)
  return static_cast< ::TP_OBJECT_TYPE >(type_);
}
inline void PointObjectFormat::set_type(::TP_OBJECT_TYPE value) {
  assert(::TP_OBJECT_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:PointObjectFormat.type)
}

// required string name = 3 [default = "Feature Point"];
inline bool PointObjectFormat::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PointObjectFormat::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PointObjectFormat::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PointObjectFormat::clear_name() {
  name_.ClearToDefaultNoArena(&::PointObjectFormat::_default_name_.get());
  clear_has_name();
}
inline const ::std::string& PointObjectFormat::name() const {
  // @@protoc_insertion_point(field_get:PointObjectFormat.name)
  return name_.GetNoArena();
}
inline void PointObjectFormat::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::PointObjectFormat::_default_name_.get(), value);
  // @@protoc_insertion_point(field_set:PointObjectFormat.name)
}
#if LANG_CXX11
inline void PointObjectFormat::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::PointObjectFormat::_default_name_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PointObjectFormat.name)
}
#endif
inline void PointObjectFormat::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::PointObjectFormat::_default_name_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PointObjectFormat.name)
}
inline void PointObjectFormat::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::PointObjectFormat::_default_name_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PointObjectFormat.name)
}
inline ::std::string* PointObjectFormat::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:PointObjectFormat.name)
  return name_.MutableNoArena(&::PointObjectFormat::_default_name_.get());
}
inline ::std::string* PointObjectFormat::release_name() {
  // @@protoc_insertion_point(field_release:PointObjectFormat.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::PointObjectFormat::_default_name_.get());
}
inline void PointObjectFormat::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::PointObjectFormat::_default_name_.get(), name);
  // @@protoc_insertion_point(field_set_allocated:PointObjectFormat.name)
}

// required int32 id = 4;
inline bool PointObjectFormat::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PointObjectFormat::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PointObjectFormat::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PointObjectFormat::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 PointObjectFormat::id() const {
  // @@protoc_insertion_point(field_get:PointObjectFormat.id)
  return id_;
}
inline void PointObjectFormat::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:PointObjectFormat.id)
}

// repeated .Point pos = 6;
inline int PointObjectFormat::pos_size() const {
  return pos_.size();
}
inline const ::Point& PointObjectFormat::pos(int index) const {
  // @@protoc_insertion_point(field_get:PointObjectFormat.pos)
  return pos_.Get(index);
}
inline ::Point* PointObjectFormat::mutable_pos(int index) {
  // @@protoc_insertion_point(field_mutable:PointObjectFormat.pos)
  return pos_.Mutable(index);
}
inline ::Point* PointObjectFormat::add_pos() {
  // @@protoc_insertion_point(field_add:PointObjectFormat.pos)
  return pos_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Point >*
PointObjectFormat::mutable_pos() {
  // @@protoc_insertion_point(field_mutable_list:PointObjectFormat.pos)
  return &pos_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Point >&
PointObjectFormat::pos() const {
  // @@protoc_insertion_point(field_list:PointObjectFormat.pos)
  return pos_;
}

// repeated .Color color = 7;
inline int PointObjectFormat::color_size() const {
  return color_.size();
}
inline const ::Color& PointObjectFormat::color(int index) const {
  // @@protoc_insertion_point(field_get:PointObjectFormat.color)
  return color_.Get(index);
}
inline ::Color* PointObjectFormat::mutable_color(int index) {
  // @@protoc_insertion_point(field_mutable:PointObjectFormat.color)
  return color_.Mutable(index);
}
inline ::Color* PointObjectFormat::add_color() {
  // @@protoc_insertion_point(field_add:PointObjectFormat.color)
  return color_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Color >*
PointObjectFormat::mutable_color() {
  // @@protoc_insertion_point(field_mutable_list:PointObjectFormat.color)
  return &color_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Color >&
PointObjectFormat::color() const {
  // @@protoc_insertion_point(field_list:PointObjectFormat.color)
  return color_;
}

// required int32 size = 8;
inline bool PointObjectFormat::has_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PointObjectFormat::set_has_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PointObjectFormat::clear_has_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PointObjectFormat::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline ::google::protobuf::int32 PointObjectFormat::size() const {
  // @@protoc_insertion_point(field_get:PointObjectFormat.size)
  return size_;
}
inline void PointObjectFormat::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:PointObjectFormat.size)
}

#if __GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6)
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PointObjectFormat_2eproto__INCLUDED
