// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ParkingSlotObjectFormat.proto

#ifndef PROTOBUF_ParkingSlotObjectFormat_2eproto__INCLUDED
#define PROTOBUF_ParkingSlotObjectFormat_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "BaseType.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_ParkingSlotObjectFormat_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsParkingSlotObjectFormatImpl();
void InitDefaultsParkingSlotObjectFormat();
inline void InitDefaults() {
  InitDefaultsParkingSlotObjectFormat();
}
}  // namespace protobuf_ParkingSlotObjectFormat_2eproto
class ParkingSlotObjectFormat;
class ParkingSlotObjectFormatDefaultTypeInternal;
extern ParkingSlotObjectFormatDefaultTypeInternal _ParkingSlotObjectFormat_default_instance_;

enum PS_STATUS {
  PS_STATUS_AVALIABLE = 0,
  PS_STATUS_OCCUPIED = 1,
  PS_STATUS_RESERVE = 10
};
bool PS_STATUS_IsValid(int value);
const PS_STATUS PS_STATUS_MIN = PS_STATUS_AVALIABLE;
const PS_STATUS PS_STATUS_MAX = PS_STATUS_RESERVE;
const int PS_STATUS_ARRAYSIZE = PS_STATUS_MAX + 1;

const ::google::protobuf::EnumDescriptor* PS_STATUS_descriptor();
inline const ::std::string& PS_STATUS_Name(PS_STATUS value) {
  return ::google::protobuf::internal::NameOfEnum(
    PS_STATUS_descriptor(), value);
}
inline bool PS_STATUS_Parse(
    const ::std::string& name, PS_STATUS* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PS_STATUS>(
    PS_STATUS_descriptor(), name, value);
}
// ===================================================================

class ParkingSlotObjectFormat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ParkingSlotObjectFormat) */ {
 public:
  ParkingSlotObjectFormat();
  virtual ~ParkingSlotObjectFormat();

  ParkingSlotObjectFormat(const ParkingSlotObjectFormat& from);

  inline ParkingSlotObjectFormat& operator=(const ParkingSlotObjectFormat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ParkingSlotObjectFormat(ParkingSlotObjectFormat&& from) noexcept
    : ParkingSlotObjectFormat() {
    *this = ::std::move(from);
  }

  inline ParkingSlotObjectFormat& operator=(ParkingSlotObjectFormat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ParkingSlotObjectFormat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ParkingSlotObjectFormat* internal_default_instance() {
    return reinterpret_cast<const ParkingSlotObjectFormat*>(
               &_ParkingSlotObjectFormat_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ParkingSlotObjectFormat* other);
  friend void swap(ParkingSlotObjectFormat& a, ParkingSlotObjectFormat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ParkingSlotObjectFormat* New() const PROTOBUF_FINAL { return New(NULL); }

  ParkingSlotObjectFormat* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ParkingSlotObjectFormat& from);
  void MergeFrom(const ParkingSlotObjectFormat& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ParkingSlotObjectFormat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Point corner_array = 6;
  int corner_array_size() const;
  void clear_corner_array();
  static const int kCornerArrayFieldNumber = 6;
  const ::Point& corner_array(int index) const;
  ::Point* mutable_corner_array(int index);
  ::Point* add_corner_array();
  ::google::protobuf::RepeatedPtrField< ::Point >*
      mutable_corner_array();
  const ::google::protobuf::RepeatedPtrField< ::Point >&
      corner_array() const;

  // required string name = 3 [default = "Parking Slot"];
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required .Color color = 7;
  bool has_color() const;
  void clear_color();
  static const int kColorFieldNumber = 7;
  const ::Color& color() const;
  ::Color* release_color();
  ::Color* mutable_color();
  void set_allocated_color(::Color* color);

  // required int32 id = 4;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 4;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 width = 8;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 8;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // required int32 length = 9;
  bool has_length() const;
  void clear_length();
  static const int kLengthFieldNumber = 9;
  ::google::protobuf::int32 length() const;
  void set_length(::google::protobuf::int32 value);

  // optional int32 pairID = 10;
  bool has_pairid() const;
  void clear_pairid();
  static const int kPairIDFieldNumber = 10;
  ::google::protobuf::int32 pairid() const;
  void set_pairid(::google::protobuf::int32 value);

  // required .PS_STATUS status = 11;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 11;
  ::PS_STATUS status() const;
  void set_status(::PS_STATUS value);

  // required .TP_OBJECT_TYPE type = 1 [default = TP_OBJECT_TYPE_S_PS];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::TP_OBJECT_TYPE type() const;
  void set_type(::TP_OBJECT_TYPE value);

  // @@protoc_insertion_point(class_scope:ParkingSlotObjectFormat)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_name();
  void clear_has_name();
  void set_has_id();
  void clear_has_id();
  void set_has_color();
  void clear_has_color();
  void set_has_width();
  void clear_has_width();
  void set_has_length();
  void clear_has_length();
  void set_has_pairid();
  void clear_has_pairid();
  void set_has_status();
  void clear_has_status();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Point > corner_array_;
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _default_name_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::Color* color_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 length_;
  ::google::protobuf::int32 pairid_;
  int status_;
  int type_;
  friend struct ::protobuf_ParkingSlotObjectFormat_2eproto::TableStruct;
  friend void ::protobuf_ParkingSlotObjectFormat_2eproto::InitDefaultsParkingSlotObjectFormatImpl();
};
// ===================================================================


// ===================================================================

#if __GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6)
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ParkingSlotObjectFormat

// required .TP_OBJECT_TYPE type = 1 [default = TP_OBJECT_TYPE_S_PS];
inline bool ParkingSlotObjectFormat::has_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ParkingSlotObjectFormat::set_has_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ParkingSlotObjectFormat::clear_has_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ParkingSlotObjectFormat::clear_type() {
  type_ = 9;
  clear_has_type();
}
inline ::TP_OBJECT_TYPE ParkingSlotObjectFormat::type() const {
  // @@protoc_insertion_point(field_get:ParkingSlotObjectFormat.type)
  return static_cast< ::TP_OBJECT_TYPE >(type_);
}
inline void ParkingSlotObjectFormat::set_type(::TP_OBJECT_TYPE value) {
  assert(::TP_OBJECT_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ParkingSlotObjectFormat.type)
}

// required string name = 3 [default = "Parking Slot"];
inline bool ParkingSlotObjectFormat::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ParkingSlotObjectFormat::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ParkingSlotObjectFormat::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ParkingSlotObjectFormat::clear_name() {
  name_.ClearToDefaultNoArena(&::ParkingSlotObjectFormat::_default_name_.get());
  clear_has_name();
}
inline const ::std::string& ParkingSlotObjectFormat::name() const {
  // @@protoc_insertion_point(field_get:ParkingSlotObjectFormat.name)
  return name_.GetNoArena();
}
inline void ParkingSlotObjectFormat::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::ParkingSlotObjectFormat::_default_name_.get(), value);
  // @@protoc_insertion_point(field_set:ParkingSlotObjectFormat.name)
}
#if LANG_CXX11
inline void ParkingSlotObjectFormat::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::ParkingSlotObjectFormat::_default_name_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ParkingSlotObjectFormat.name)
}
#endif
inline void ParkingSlotObjectFormat::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::ParkingSlotObjectFormat::_default_name_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ParkingSlotObjectFormat.name)
}
inline void ParkingSlotObjectFormat::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::ParkingSlotObjectFormat::_default_name_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ParkingSlotObjectFormat.name)
}
inline ::std::string* ParkingSlotObjectFormat::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:ParkingSlotObjectFormat.name)
  return name_.MutableNoArena(&::ParkingSlotObjectFormat::_default_name_.get());
}
inline ::std::string* ParkingSlotObjectFormat::release_name() {
  // @@protoc_insertion_point(field_release:ParkingSlotObjectFormat.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::ParkingSlotObjectFormat::_default_name_.get());
}
inline void ParkingSlotObjectFormat::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::ParkingSlotObjectFormat::_default_name_.get(), name);
  // @@protoc_insertion_point(field_set_allocated:ParkingSlotObjectFormat.name)
}

// required int32 id = 4;
inline bool ParkingSlotObjectFormat::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ParkingSlotObjectFormat::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ParkingSlotObjectFormat::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ParkingSlotObjectFormat::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ParkingSlotObjectFormat::id() const {
  // @@protoc_insertion_point(field_get:ParkingSlotObjectFormat.id)
  return id_;
}
inline void ParkingSlotObjectFormat::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ParkingSlotObjectFormat.id)
}

// repeated .Point corner_array = 6;
inline int ParkingSlotObjectFormat::corner_array_size() const {
  return corner_array_.size();
}
inline const ::Point& ParkingSlotObjectFormat::corner_array(int index) const {
  // @@protoc_insertion_point(field_get:ParkingSlotObjectFormat.corner_array)
  return corner_array_.Get(index);
}
inline ::Point* ParkingSlotObjectFormat::mutable_corner_array(int index) {
  // @@protoc_insertion_point(field_mutable:ParkingSlotObjectFormat.corner_array)
  return corner_array_.Mutable(index);
}
inline ::Point* ParkingSlotObjectFormat::add_corner_array() {
  // @@protoc_insertion_point(field_add:ParkingSlotObjectFormat.corner_array)
  return corner_array_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Point >*
ParkingSlotObjectFormat::mutable_corner_array() {
  // @@protoc_insertion_point(field_mutable_list:ParkingSlotObjectFormat.corner_array)
  return &corner_array_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Point >&
ParkingSlotObjectFormat::corner_array() const {
  // @@protoc_insertion_point(field_list:ParkingSlotObjectFormat.corner_array)
  return corner_array_;
}

// required .Color color = 7;
inline bool ParkingSlotObjectFormat::has_color() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ParkingSlotObjectFormat::set_has_color() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ParkingSlotObjectFormat::clear_has_color() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::Color& ParkingSlotObjectFormat::color() const {
  const ::Color* p = color_;
  // @@protoc_insertion_point(field_get:ParkingSlotObjectFormat.color)
  return p != NULL ? *p : *reinterpret_cast<const ::Color*>(
      &::_Color_default_instance_);
}
inline ::Color* ParkingSlotObjectFormat::release_color() {
  // @@protoc_insertion_point(field_release:ParkingSlotObjectFormat.color)
  clear_has_color();
  ::Color* temp = color_;
  color_ = NULL;
  return temp;
}
inline ::Color* ParkingSlotObjectFormat::mutable_color() {
  set_has_color();
  if (color_ == NULL) {
    color_ = new ::Color;
  }
  // @@protoc_insertion_point(field_mutable:ParkingSlotObjectFormat.color)
  return color_;
}
inline void ParkingSlotObjectFormat::set_allocated_color(::Color* color) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(color_);
  }
  if (color) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      color = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, color, submessage_arena);
    }
    set_has_color();
  } else {
    clear_has_color();
  }
  color_ = color;
  // @@protoc_insertion_point(field_set_allocated:ParkingSlotObjectFormat.color)
}

// required int32 width = 8;
inline bool ParkingSlotObjectFormat::has_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ParkingSlotObjectFormat::set_has_width() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ParkingSlotObjectFormat::clear_has_width() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ParkingSlotObjectFormat::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 ParkingSlotObjectFormat::width() const {
  // @@protoc_insertion_point(field_get:ParkingSlotObjectFormat.width)
  return width_;
}
inline void ParkingSlotObjectFormat::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:ParkingSlotObjectFormat.width)
}

// required int32 length = 9;
inline bool ParkingSlotObjectFormat::has_length() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ParkingSlotObjectFormat::set_has_length() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ParkingSlotObjectFormat::clear_has_length() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ParkingSlotObjectFormat::clear_length() {
  length_ = 0;
  clear_has_length();
}
inline ::google::protobuf::int32 ParkingSlotObjectFormat::length() const {
  // @@protoc_insertion_point(field_get:ParkingSlotObjectFormat.length)
  return length_;
}
inline void ParkingSlotObjectFormat::set_length(::google::protobuf::int32 value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:ParkingSlotObjectFormat.length)
}

// optional int32 pairID = 10;
inline bool ParkingSlotObjectFormat::has_pairid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ParkingSlotObjectFormat::set_has_pairid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ParkingSlotObjectFormat::clear_has_pairid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ParkingSlotObjectFormat::clear_pairid() {
  pairid_ = 0;
  clear_has_pairid();
}
inline ::google::protobuf::int32 ParkingSlotObjectFormat::pairid() const {
  // @@protoc_insertion_point(field_get:ParkingSlotObjectFormat.pairID)
  return pairid_;
}
inline void ParkingSlotObjectFormat::set_pairid(::google::protobuf::int32 value) {
  set_has_pairid();
  pairid_ = value;
  // @@protoc_insertion_point(field_set:ParkingSlotObjectFormat.pairID)
}

// required .PS_STATUS status = 11;
inline bool ParkingSlotObjectFormat::has_status() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ParkingSlotObjectFormat::set_has_status() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ParkingSlotObjectFormat::clear_has_status() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ParkingSlotObjectFormat::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::PS_STATUS ParkingSlotObjectFormat::status() const {
  // @@protoc_insertion_point(field_get:ParkingSlotObjectFormat.status)
  return static_cast< ::PS_STATUS >(status_);
}
inline void ParkingSlotObjectFormat::set_status(::PS_STATUS value) {
  assert(::PS_STATUS_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:ParkingSlotObjectFormat.status)
}

#if __GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6)
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::PS_STATUS> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PS_STATUS>() {
  return ::PS_STATUS_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ParkingSlotObjectFormat_2eproto__INCLUDED
