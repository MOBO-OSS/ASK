// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BaseType.proto

#ifndef PROTOBUF_BaseType_2eproto__INCLUDED
#define PROTOBUF_BaseType_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_BaseType_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsPosImpl();
void InitDefaultsPos();
void InitDefaultsPointImpl();
void InitDefaultsPoint();
void InitDefaultsOrientImpl();
void InitDefaultsOrient();
void InitDefaultsContourImpl();
void InitDefaultsContour();
void InitDefaultsColorImpl();
void InitDefaultsColor();
inline void InitDefaults() {
  InitDefaultsPos();
  InitDefaultsPoint();
  InitDefaultsOrient();
  InitDefaultsContour();
  InitDefaultsColor();
}
}  // namespace protobuf_BaseType_2eproto
class Color;
class ColorDefaultTypeInternal;
extern ColorDefaultTypeInternal _Color_default_instance_;
class Contour;
class ContourDefaultTypeInternal;
extern ContourDefaultTypeInternal _Contour_default_instance_;
class Orient;
class OrientDefaultTypeInternal;
extern OrientDefaultTypeInternal _Orient_default_instance_;
class Point;
class PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class Pos;
class PosDefaultTypeInternal;
extern PosDefaultTypeInternal _Pos_default_instance_;

enum TP_OBJECT_TYPE {
  TP_OBJECT_TYPE_UNKOWN = 0,
  TP_OBJECT_TYPE_EGO = 1,
  TP_OBJECT_TYPE_GROUND = 2,
  TP_OBJECT_TYPE_RSP_POINT = 3,
  TP_OBJECT_TYPE_OBSTACLE_STATIC = 4,
  TP_OBJECT_TYPE_OBSTACLE_DYNAMIC = 5,
  TP_OBJECT_TYPE_S_LANE = 6,
  TP_OBJECT_TYPE_LINE_STRAIGHT = 7,
  TP_OBJECT_TYPE_LINE_CURVE = 8,
  TP_OBJECT_TYPE_S_PS = 9,
  TP_OBJECT_TYPE_GUAIDANCE = 10,
  TP_OBJECT_TYPE_D_PEDESTRAIN = 11,
  TP_OBJECT_TYPE_D_DOG = 12,
  TP_OBJECT_TYPE_D_POINT = 13,
  TP_OBJECT_TYPE_S_HUD = 14,
  TP_OBJECT_TYPE_D_TRUCK = 15,
  TP_OBJECT_TYPE_D_CAR = 16,
  TP_OBJECT_TYPE_D_BUS = 17,
  TP_OBJECT_TYPE_RESERVER = 20
};
bool TP_OBJECT_TYPE_IsValid(int value);
const TP_OBJECT_TYPE TP_OBJECT_TYPE_MIN = TP_OBJECT_TYPE_UNKOWN;
const TP_OBJECT_TYPE TP_OBJECT_TYPE_MAX = TP_OBJECT_TYPE_RESERVER;
const int TP_OBJECT_TYPE_ARRAYSIZE = TP_OBJECT_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* TP_OBJECT_TYPE_descriptor();
inline const ::std::string& TP_OBJECT_TYPE_Name(TP_OBJECT_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    TP_OBJECT_TYPE_descriptor(), value);
}
inline bool TP_OBJECT_TYPE_Parse(
    const ::std::string& name, TP_OBJECT_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TP_OBJECT_TYPE>(
    TP_OBJECT_TYPE_descriptor(), name, value);
}
enum TP_SENSOR_TYPE {
  TP_SENSOR_TYPE_UNKNOW = 0,
  TP_SENSOR_TYPE_CAMERA = 1,
  TP_SENSOR_TYPE_USS = 2,
  TP_SENSOR_TYPE_RADAR = 3,
  TP_SENSOR_TYPE_LIDAR = 4,
  TP_SENSOR_TYPE_RESERVE = 5
};
bool TP_SENSOR_TYPE_IsValid(int value);
const TP_SENSOR_TYPE TP_SENSOR_TYPE_MIN = TP_SENSOR_TYPE_UNKNOW;
const TP_SENSOR_TYPE TP_SENSOR_TYPE_MAX = TP_SENSOR_TYPE_RESERVE;
const int TP_SENSOR_TYPE_ARRAYSIZE = TP_SENSOR_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* TP_SENSOR_TYPE_descriptor();
inline const ::std::string& TP_SENSOR_TYPE_Name(TP_SENSOR_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    TP_SENSOR_TYPE_descriptor(), value);
}
inline bool TP_SENSOR_TYPE_Parse(
    const ::std::string& name, TP_SENSOR_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TP_SENSOR_TYPE>(
    TP_SENSOR_TYPE_descriptor(), name, value);
}
enum COORD_TYPE {
  COORD_TYPE_UNDEFINE = 0,
  COORD_TYPE_LOCAL = 1,
  COORD_TYPE_GLOBAL_DIN70K = 2,
  COORD_TYPE_RESERVE = 10
};
bool COORD_TYPE_IsValid(int value);
const COORD_TYPE COORD_TYPE_MIN = COORD_TYPE_UNDEFINE;
const COORD_TYPE COORD_TYPE_MAX = COORD_TYPE_RESERVE;
const int COORD_TYPE_ARRAYSIZE = COORD_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* COORD_TYPE_descriptor();
inline const ::std::string& COORD_TYPE_Name(COORD_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    COORD_TYPE_descriptor(), value);
}
inline bool COORD_TYPE_Parse(
    const ::std::string& name, COORD_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<COORD_TYPE>(
    COORD_TYPE_descriptor(), name, value);
}
// ===================================================================

class Pos : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Pos) */ {
 public:
  Pos();
  virtual ~Pos();

  Pos(const Pos& from);

  inline Pos& operator=(const Pos& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Pos(Pos&& from) noexcept
    : Pos() {
    *this = ::std::move(from);
  }

  inline Pos& operator=(Pos&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pos& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pos* internal_default_instance() {
    return reinterpret_cast<const Pos*>(
               &_Pos_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Pos* other);
  friend void swap(Pos& a, Pos& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Pos* New() const PROTOBUF_FINAL { return New(NULL); }

  Pos* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Pos& from);
  void MergeFrom(const Pos& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Pos* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // required double y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // required double z = 3;
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 3;
  double z() const;
  void set_z(double value);

  // @@protoc_insertion_point(class_scope:Pos)
 private:
  void set_has_x();
  void clear_has_x();
  void set_has_y();
  void clear_has_y();
  void set_has_z();
  void clear_has_z();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double x_;
  double y_;
  double z_;
  friend struct ::protobuf_BaseType_2eproto::TableStruct;
  friend void ::protobuf_BaseType_2eproto::InitDefaultsPosImpl();
};
// -------------------------------------------------------------------

class Point : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Point) */ {
 public:
  Point();
  virtual ~Point();

  Point(const Point& from);

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(Point&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Point& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Point* other);
  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Point* New() const PROTOBUF_FINAL { return New(NULL); }

  Point* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Point* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // required double y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // required double z = 3;
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 3;
  double z() const;
  void set_z(double value);

  // required double radius = 4 [default = 1];
  bool has_radius() const;
  void clear_radius();
  static const int kRadiusFieldNumber = 4;
  double radius() const;
  void set_radius(double value);

  // @@protoc_insertion_point(class_scope:Point)
 private:
  void set_has_x();
  void clear_has_x();
  void set_has_y();
  void clear_has_y();
  void set_has_z();
  void clear_has_z();
  void set_has_radius();
  void clear_has_radius();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double x_;
  double y_;
  double z_;
  double radius_;
  friend struct ::protobuf_BaseType_2eproto::TableStruct;
  friend void ::protobuf_BaseType_2eproto::InitDefaultsPointImpl();
};
// -------------------------------------------------------------------

class Orient : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Orient) */ {
 public:
  Orient();
  virtual ~Orient();

  Orient(const Orient& from);

  inline Orient& operator=(const Orient& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Orient(Orient&& from) noexcept
    : Orient() {
    *this = ::std::move(from);
  }

  inline Orient& operator=(Orient&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Orient& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Orient* internal_default_instance() {
    return reinterpret_cast<const Orient*>(
               &_Orient_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Orient* other);
  friend void swap(Orient& a, Orient& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Orient* New() const PROTOBUF_FINAL { return New(NULL); }

  Orient* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Orient& from);
  void MergeFrom(const Orient& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Orient* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // required double y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // required double z = 3;
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 3;
  double z() const;
  void set_z(double value);

  // @@protoc_insertion_point(class_scope:Orient)
 private:
  void set_has_x();
  void clear_has_x();
  void set_has_y();
  void clear_has_y();
  void set_has_z();
  void clear_has_z();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double x_;
  double y_;
  double z_;
  friend struct ::protobuf_BaseType_2eproto::TableStruct;
  friend void ::protobuf_BaseType_2eproto::InitDefaultsOrientImpl();
};
// -------------------------------------------------------------------

class Contour : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Contour) */ {
 public:
  Contour();
  virtual ~Contour();

  Contour(const Contour& from);

  inline Contour& operator=(const Contour& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Contour(Contour&& from) noexcept
    : Contour() {
    *this = ::std::move(from);
  }

  inline Contour& operator=(Contour&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Contour& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Contour* internal_default_instance() {
    return reinterpret_cast<const Contour*>(
               &_Contour_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Contour* other);
  friend void swap(Contour& a, Contour& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Contour* New() const PROTOBUF_FINAL { return New(NULL); }

  Contour* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Contour& from);
  void MergeFrom(const Contour& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Contour* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Point Points = 3;
  int points_size() const;
  void clear_points();
  static const int kPointsFieldNumber = 3;
  const ::Point& points(int index) const;
  ::Point* mutable_points(int index);
  ::Point* add_points();
  ::google::protobuf::RepeatedPtrField< ::Point >*
      mutable_points();
  const ::google::protobuf::RepeatedPtrField< ::Point >&
      points() const;

  // optional .Point MassCenter = 1;
  bool has_masscenter() const;
  void clear_masscenter();
  static const int kMassCenterFieldNumber = 1;
  const ::Point& masscenter() const;
  ::Point* release_masscenter();
  ::Point* mutable_masscenter();
  void set_allocated_masscenter(::Point* masscenter);

  // required int32 PointCnt = 2;
  bool has_pointcnt() const;
  void clear_pointcnt();
  static const int kPointCntFieldNumber = 2;
  ::google::protobuf::int32 pointcnt() const;
  void set_pointcnt(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Contour)
 private:
  void set_has_masscenter();
  void clear_has_masscenter();
  void set_has_pointcnt();
  void clear_has_pointcnt();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Point > points_;
  ::Point* masscenter_;
  ::google::protobuf::int32 pointcnt_;
  friend struct ::protobuf_BaseType_2eproto::TableStruct;
  friend void ::protobuf_BaseType_2eproto::InitDefaultsContourImpl();
};
// -------------------------------------------------------------------

class Color : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Color) */ {
 public:
  Color();
  virtual ~Color();

  Color(const Color& from);

  inline Color& operator=(const Color& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Color(Color&& from) noexcept
    : Color() {
    *this = ::std::move(from);
  }

  inline Color& operator=(Color&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Color& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Color* internal_default_instance() {
    return reinterpret_cast<const Color*>(
               &_Color_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(Color* other);
  friend void swap(Color& a, Color& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Color* New() const PROTOBUF_FINAL { return New(NULL); }

  Color* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Color& from);
  void MergeFrom(const Color& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Color* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double r = 1;
  bool has_r() const;
  void clear_r();
  static const int kRFieldNumber = 1;
  double r() const;
  void set_r(double value);

  // required double g = 2;
  bool has_g() const;
  void clear_g();
  static const int kGFieldNumber = 2;
  double g() const;
  void set_g(double value);

  // required double b = 3;
  bool has_b() const;
  void clear_b();
  static const int kBFieldNumber = 3;
  double b() const;
  void set_b(double value);

  // required double a = 4;
  bool has_a() const;
  void clear_a();
  static const int kAFieldNumber = 4;
  double a() const;
  void set_a(double value);

  // @@protoc_insertion_point(class_scope:Color)
 private:
  void set_has_r();
  void clear_has_r();
  void set_has_g();
  void clear_has_g();
  void set_has_b();
  void clear_has_b();
  void set_has_a();
  void clear_has_a();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double r_;
  double g_;
  double b_;
  double a_;
  friend struct ::protobuf_BaseType_2eproto::TableStruct;
  friend void ::protobuf_BaseType_2eproto::InitDefaultsColorImpl();
};
// ===================================================================


// ===================================================================

#if __GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6)
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Pos

// required double x = 1;
inline bool Pos::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Pos::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Pos::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Pos::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double Pos::x() const {
  // @@protoc_insertion_point(field_get:Pos.x)
  return x_;
}
inline void Pos::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:Pos.x)
}

// required double y = 2;
inline bool Pos::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Pos::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Pos::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Pos::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double Pos::y() const {
  // @@protoc_insertion_point(field_get:Pos.y)
  return y_;
}
inline void Pos::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:Pos.y)
}

// required double z = 3;
inline bool Pos::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Pos::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Pos::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Pos::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline double Pos::z() const {
  // @@protoc_insertion_point(field_get:Pos.z)
  return z_;
}
inline void Pos::set_z(double value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:Pos.z)
}

// -------------------------------------------------------------------

// Point

// required double x = 1;
inline bool Point::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Point::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Point::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Point::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double Point::x() const {
  // @@protoc_insertion_point(field_get:Point.x)
  return x_;
}
inline void Point::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:Point.x)
}

// required double y = 2;
inline bool Point::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Point::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Point::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Point::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double Point::y() const {
  // @@protoc_insertion_point(field_get:Point.y)
  return y_;
}
inline void Point::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:Point.y)
}

// required double z = 3;
inline bool Point::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Point::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Point::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Point::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline double Point::z() const {
  // @@protoc_insertion_point(field_get:Point.z)
  return z_;
}
inline void Point::set_z(double value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:Point.z)
}

// required double radius = 4 [default = 1];
inline bool Point::has_radius() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Point::set_has_radius() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Point::clear_has_radius() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Point::clear_radius() {
  radius_ = 1;
  clear_has_radius();
}
inline double Point::radius() const {
  // @@protoc_insertion_point(field_get:Point.radius)
  return radius_;
}
inline void Point::set_radius(double value) {
  set_has_radius();
  radius_ = value;
  // @@protoc_insertion_point(field_set:Point.radius)
}

// -------------------------------------------------------------------

// Orient

// required double x = 1;
inline bool Orient::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Orient::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Orient::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Orient::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double Orient::x() const {
  // @@protoc_insertion_point(field_get:Orient.x)
  return x_;
}
inline void Orient::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:Orient.x)
}

// required double y = 2;
inline bool Orient::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Orient::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Orient::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Orient::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double Orient::y() const {
  // @@protoc_insertion_point(field_get:Orient.y)
  return y_;
}
inline void Orient::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:Orient.y)
}

// required double z = 3;
inline bool Orient::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Orient::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Orient::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Orient::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline double Orient::z() const {
  // @@protoc_insertion_point(field_get:Orient.z)
  return z_;
}
inline void Orient::set_z(double value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:Orient.z)
}

// -------------------------------------------------------------------

// Contour

// optional .Point MassCenter = 1;
inline bool Contour::has_masscenter() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Contour::set_has_masscenter() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Contour::clear_has_masscenter() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Contour::clear_masscenter() {
  if (masscenter_ != NULL) masscenter_->Clear();
  clear_has_masscenter();
}
inline const ::Point& Contour::masscenter() const {
  const ::Point* p = masscenter_;
  // @@protoc_insertion_point(field_get:Contour.MassCenter)
  return p != NULL ? *p : *reinterpret_cast<const ::Point*>(
      &::_Point_default_instance_);
}
inline ::Point* Contour::release_masscenter() {
  // @@protoc_insertion_point(field_release:Contour.MassCenter)
  clear_has_masscenter();
  ::Point* temp = masscenter_;
  masscenter_ = NULL;
  return temp;
}
inline ::Point* Contour::mutable_masscenter() {
  set_has_masscenter();
  if (masscenter_ == NULL) {
    masscenter_ = new ::Point;
  }
  // @@protoc_insertion_point(field_mutable:Contour.MassCenter)
  return masscenter_;
}
inline void Contour::set_allocated_masscenter(::Point* masscenter) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete masscenter_;
  }
  if (masscenter) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      masscenter = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, masscenter, submessage_arena);
    }
    set_has_masscenter();
  } else {
    clear_has_masscenter();
  }
  masscenter_ = masscenter;
  // @@protoc_insertion_point(field_set_allocated:Contour.MassCenter)
}

// required int32 PointCnt = 2;
inline bool Contour::has_pointcnt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Contour::set_has_pointcnt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Contour::clear_has_pointcnt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Contour::clear_pointcnt() {
  pointcnt_ = 0;
  clear_has_pointcnt();
}
inline ::google::protobuf::int32 Contour::pointcnt() const {
  // @@protoc_insertion_point(field_get:Contour.PointCnt)
  return pointcnt_;
}
inline void Contour::set_pointcnt(::google::protobuf::int32 value) {
  set_has_pointcnt();
  pointcnt_ = value;
  // @@protoc_insertion_point(field_set:Contour.PointCnt)
}

// repeated .Point Points = 3;
inline int Contour::points_size() const {
  return points_.size();
}
inline void Contour::clear_points() {
  points_.Clear();
}
inline const ::Point& Contour::points(int index) const {
  // @@protoc_insertion_point(field_get:Contour.Points)
  return points_.Get(index);
}
inline ::Point* Contour::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:Contour.Points)
  return points_.Mutable(index);
}
inline ::Point* Contour::add_points() {
  // @@protoc_insertion_point(field_add:Contour.Points)
  return points_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Point >*
Contour::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:Contour.Points)
  return &points_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Point >&
Contour::points() const {
  // @@protoc_insertion_point(field_list:Contour.Points)
  return points_;
}

// -------------------------------------------------------------------

// Color

// required double r = 1;
inline bool Color::has_r() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Color::set_has_r() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Color::clear_has_r() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Color::clear_r() {
  r_ = 0;
  clear_has_r();
}
inline double Color::r() const {
  // @@protoc_insertion_point(field_get:Color.r)
  return r_;
}
inline void Color::set_r(double value) {
  set_has_r();
  r_ = value;
  // @@protoc_insertion_point(field_set:Color.r)
}

// required double g = 2;
inline bool Color::has_g() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Color::set_has_g() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Color::clear_has_g() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Color::clear_g() {
  g_ = 0;
  clear_has_g();
}
inline double Color::g() const {
  // @@protoc_insertion_point(field_get:Color.g)
  return g_;
}
inline void Color::set_g(double value) {
  set_has_g();
  g_ = value;
  // @@protoc_insertion_point(field_set:Color.g)
}

// required double b = 3;
inline bool Color::has_b() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Color::set_has_b() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Color::clear_has_b() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Color::clear_b() {
  b_ = 0;
  clear_has_b();
}
inline double Color::b() const {
  // @@protoc_insertion_point(field_get:Color.b)
  return b_;
}
inline void Color::set_b(double value) {
  set_has_b();
  b_ = value;
  // @@protoc_insertion_point(field_set:Color.b)
}

// required double a = 4;
inline bool Color::has_a() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Color::set_has_a() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Color::clear_has_a() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Color::clear_a() {
  a_ = 0;
  clear_has_a();
}
inline double Color::a() const {
  // @@protoc_insertion_point(field_get:Color.a)
  return a_;
}
inline void Color::set_a(double value) {
  set_has_a();
  a_ = value;
  // @@protoc_insertion_point(field_set:Color.a)
}

#if __GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6)
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::TP_OBJECT_TYPE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TP_OBJECT_TYPE>() {
  return ::TP_OBJECT_TYPE_descriptor();
}
template <> struct is_proto_enum< ::TP_SENSOR_TYPE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TP_SENSOR_TYPE>() {
  return ::TP_SENSOR_TYPE_descriptor();
}
template <> struct is_proto_enum< ::COORD_TYPE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::COORD_TYPE>() {
  return ::COORD_TYPE_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_BaseType_2eproto__INCLUDED
