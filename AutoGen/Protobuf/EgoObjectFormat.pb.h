// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EgoObjectFormat.proto

#ifndef PROTOBUF_EgoObjectFormat_2eproto__INCLUDED
#define PROTOBUF_EgoObjectFormat_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "BaseType.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_EgoObjectFormat_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsEgoObjectFormatImpl();
void InitDefaultsEgoObjectFormat();
inline void InitDefaults() {
  InitDefaultsEgoObjectFormat();
}
}  // namespace protobuf_EgoObjectFormat_2eproto
class EgoObjectFormat;
class EgoObjectFormatDefaultTypeInternal;
extern EgoObjectFormatDefaultTypeInternal _EgoObjectFormat_default_instance_;

// ===================================================================

class EgoObjectFormat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:EgoObjectFormat) */ {
 public:
  EgoObjectFormat();
  virtual ~EgoObjectFormat();

  EgoObjectFormat(const EgoObjectFormat& from);

  inline EgoObjectFormat& operator=(const EgoObjectFormat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EgoObjectFormat(EgoObjectFormat&& from) noexcept
    : EgoObjectFormat() {
    *this = ::std::move(from);
  }

  inline EgoObjectFormat& operator=(EgoObjectFormat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EgoObjectFormat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EgoObjectFormat* internal_default_instance() {
    return reinterpret_cast<const EgoObjectFormat*>(
               &_EgoObjectFormat_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(EgoObjectFormat* other);
  friend void swap(EgoObjectFormat& a, EgoObjectFormat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EgoObjectFormat* New() const PROTOBUF_FINAL { return New(NULL); }

  EgoObjectFormat* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EgoObjectFormat& from);
  void MergeFrom(const EgoObjectFormat& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EgoObjectFormat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 3 [default = "ego"];
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string osgFile = 5 [default = "../Data/robot.osg"];
  bool has_osgfile() const;
  void clear_osgfile();
  static const int kOsgFileFieldNumber = 5;
  const ::std::string& osgfile() const;
  void set_osgfile(const ::std::string& value);
  #if LANG_CXX11
  void set_osgfile(::std::string&& value);
  #endif
  void set_osgfile(const char* value);
  void set_osgfile(const char* value, size_t size);
  ::std::string* mutable_osgfile();
  ::std::string* release_osgfile();
  void set_allocated_osgfile(::std::string* osgfile);

  // required int32 id = 4;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 4;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required .TP_OBJECT_TYPE type = 1 [default = TP_OBJECT_TYPE_EGO];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::TP_OBJECT_TYPE type() const;
  void set_type(::TP_OBJECT_TYPE value);

  // @@protoc_insertion_point(class_scope:EgoObjectFormat)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_name();
  void clear_has_name();
  void set_has_id();
  void clear_has_id();
  void set_has_osgfile();
  void clear_has_osgfile();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _default_name_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _default_osgfile_;
  ::google::protobuf::internal::ArenaStringPtr osgfile_;
  ::google::protobuf::int32 id_;
  int type_;
  friend struct ::protobuf_EgoObjectFormat_2eproto::TableStruct;
  friend void ::protobuf_EgoObjectFormat_2eproto::InitDefaultsEgoObjectFormatImpl();
};
// ===================================================================


// ===================================================================

#if __GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6)
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EgoObjectFormat

// required .TP_OBJECT_TYPE type = 1 [default = TP_OBJECT_TYPE_EGO];
inline bool EgoObjectFormat::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EgoObjectFormat::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EgoObjectFormat::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EgoObjectFormat::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::TP_OBJECT_TYPE EgoObjectFormat::type() const {
  // @@protoc_insertion_point(field_get:EgoObjectFormat.type)
  return static_cast< ::TP_OBJECT_TYPE >(type_);
}
inline void EgoObjectFormat::set_type(::TP_OBJECT_TYPE value) {
  assert(::TP_OBJECT_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:EgoObjectFormat.type)
}

// required string name = 3 [default = "ego"];
inline bool EgoObjectFormat::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EgoObjectFormat::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EgoObjectFormat::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EgoObjectFormat::clear_name() {
  name_.ClearToDefaultNoArena(&::EgoObjectFormat::_default_name_.get());
  clear_has_name();
}
inline const ::std::string& EgoObjectFormat::name() const {
  // @@protoc_insertion_point(field_get:EgoObjectFormat.name)
  return name_.GetNoArena();
}
inline void EgoObjectFormat::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::EgoObjectFormat::_default_name_.get(), value);
  // @@protoc_insertion_point(field_set:EgoObjectFormat.name)
}
#if LANG_CXX11
inline void EgoObjectFormat::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::EgoObjectFormat::_default_name_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:EgoObjectFormat.name)
}
#endif
inline void EgoObjectFormat::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::EgoObjectFormat::_default_name_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:EgoObjectFormat.name)
}
inline void EgoObjectFormat::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::EgoObjectFormat::_default_name_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:EgoObjectFormat.name)
}
inline ::std::string* EgoObjectFormat::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:EgoObjectFormat.name)
  return name_.MutableNoArena(&::EgoObjectFormat::_default_name_.get());
}
inline ::std::string* EgoObjectFormat::release_name() {
  // @@protoc_insertion_point(field_release:EgoObjectFormat.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::EgoObjectFormat::_default_name_.get());
}
inline void EgoObjectFormat::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::EgoObjectFormat::_default_name_.get(), name);
  // @@protoc_insertion_point(field_set_allocated:EgoObjectFormat.name)
}

// required int32 id = 4;
inline bool EgoObjectFormat::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EgoObjectFormat::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EgoObjectFormat::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EgoObjectFormat::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 EgoObjectFormat::id() const {
  // @@protoc_insertion_point(field_get:EgoObjectFormat.id)
  return id_;
}
inline void EgoObjectFormat::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:EgoObjectFormat.id)
}

// optional string osgFile = 5 [default = "../Data/robot.osg"];
inline bool EgoObjectFormat::has_osgfile() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EgoObjectFormat::set_has_osgfile() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EgoObjectFormat::clear_has_osgfile() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EgoObjectFormat::clear_osgfile() {
  osgfile_.ClearToDefaultNoArena(&::EgoObjectFormat::_default_osgfile_.get());
  clear_has_osgfile();
}
inline const ::std::string& EgoObjectFormat::osgfile() const {
  // @@protoc_insertion_point(field_get:EgoObjectFormat.osgFile)
  return osgfile_.GetNoArena();
}
inline void EgoObjectFormat::set_osgfile(const ::std::string& value) {
  set_has_osgfile();
  osgfile_.SetNoArena(&::EgoObjectFormat::_default_osgfile_.get(), value);
  // @@protoc_insertion_point(field_set:EgoObjectFormat.osgFile)
}
#if LANG_CXX11
inline void EgoObjectFormat::set_osgfile(::std::string&& value) {
  set_has_osgfile();
  osgfile_.SetNoArena(
    &::EgoObjectFormat::_default_osgfile_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:EgoObjectFormat.osgFile)
}
#endif
inline void EgoObjectFormat::set_osgfile(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_osgfile();
  osgfile_.SetNoArena(&::EgoObjectFormat::_default_osgfile_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:EgoObjectFormat.osgFile)
}
inline void EgoObjectFormat::set_osgfile(const char* value, size_t size) {
  set_has_osgfile();
  osgfile_.SetNoArena(&::EgoObjectFormat::_default_osgfile_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:EgoObjectFormat.osgFile)
}
inline ::std::string* EgoObjectFormat::mutable_osgfile() {
  set_has_osgfile();
  // @@protoc_insertion_point(field_mutable:EgoObjectFormat.osgFile)
  return osgfile_.MutableNoArena(&::EgoObjectFormat::_default_osgfile_.get());
}
inline ::std::string* EgoObjectFormat::release_osgfile() {
  // @@protoc_insertion_point(field_release:EgoObjectFormat.osgFile)
  clear_has_osgfile();
  return osgfile_.ReleaseNoArena(&::EgoObjectFormat::_default_osgfile_.get());
}
inline void EgoObjectFormat::set_allocated_osgfile(::std::string* osgfile) {
  if (osgfile != NULL) {
    set_has_osgfile();
  } else {
    clear_has_osgfile();
  }
  osgfile_.SetAllocatedNoArena(&::EgoObjectFormat::_default_osgfile_.get(), osgfile);
  // @@protoc_insertion_point(field_set_allocated:EgoObjectFormat.osgFile)
}

#if __GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6)
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_EgoObjectFormat_2eproto__INCLUDED
